#!/bin/bash

set -eo pipefail

gnu_sed() {
  $(which gsed || which sed) "$@"
}

RELEASE_DIR="$1"

if [ -z "$RELEASE_DIR" ]; then
  echo "Usage: $0 <RELEASE_DIR>"
  exit 1
fi

release_dir="$RELEASE_DIR"
build_dir="$release_dir/images/ubuntu/scripts/build"
custom_dir="$release_dir/images/ubuntu/custom"
toolsets_dir="$release_dir/images/ubuntu/toolsets"
TOOLSET_PATH="$toolsets_dir/toolset-2204.json"

# add gpu install script
cp patches/ubuntu/build/install-gpu.sh "$release_dir/images/ubuntu/scripts/build/"

# custom stuff
mkdir -p $custom_dir
cp -r patches/ubuntu/files $custom_dir/

# Save ~3.2GB by removing default docker images
yq -oj -i '.docker.images = []' $TOOLSET_PATH

# Use official runners for CodeQL
yq -oj -i 'del(.toolcache[] | select(.name == "CodeQL"))' $TOOLSET_PATH

# only keep 4 last python version
yq -oj -i 'eval(.toolcache[] | select(.name == "Python") | .versions |= [.[-4],.[-3],.[-2],.[-1]])' $TOOLSET_PATH
# yq -oj -i 'eval(.toolcache[] | select(.name == "Python") | .versions |= [.[-1]])' $TOOLSET_PATH

# only keep one last pypy version
yq -oj -i 'eval(.toolcache[] | select(.name == "PyPy") | .versions |= [.[-1]])' $TOOLSET_PATH
# only keep one last go version
yq -oj -i 'eval(.toolcache[] | select(.name == "go") | .versions |= [.[-1]])' $TOOLSET_PATH
yq -oj -i 'eval(.toolcache[] | select(.name == "go") | .default |= (parent | .versions[-1]))' $TOOLSET_PATH
# only keep one last clang version
yq -oj -i 'eval(.clang | .versions |= [.[-1]])' $TOOLSET_PATH
yq -oj -i 'eval(.clang | .default_version |= (parent | .versions[-1]))' $TOOLSET_PATH
# only keep latest dotnet version
yq -oj -i 'eval(.dotnet | .aptPackages |= [.[-1]])' $TOOLSET_PATH
yq -oj -i 'eval(.dotnet | .versions |= [.[-1]])' $TOOLSET_PATH
# remove PSScriptAnalyzer
yq -oj -i 'eval(del(.powershellModules[] | select(.name == "PSScriptAnalyzer")))' $TOOLSET_PATH
# only keep the default java version (use action to install additional, adds 5s)
yq -oj -i 'eval(.java | .versions |= [(parent | .default)])' $TOOLSET_PATH
# only keep the default android ndk version
yq -oj -i 'eval(.android.ndk | .versions |= [(parent | .default)])' $TOOLSET_PATH
# only keep latest gfortran version
yq -oj -i 'eval(.gfortran | .versions |= [.[-1]])' $TOOLSET_PATH
# only keep one last gcc version
yq -oj -i 'eval(.gcc | .versions |= [.[-1]])' $TOOLSET_PATH
# remove sphinxsearch
yq -oj -i 'del(.apt.cmd_packages[] | select(. == "sphinxsearch"))' $TOOLSET_PATH

# only keep yarn
yq -oj -i 'del(.node_modules[] | (select(.name != "yarn" and .name != "typescript")))' $TOOLSET_PATH

yq -oj -i 'del(.azureModules[])' $TOOLSET_PATH

# Remove chromium since chrome already installed. 500MB saved
# https://github.com/actions/runner-images/issues/2388
# might need to add symlinks if causing issues, but let's see
gnu_sed -i 's|# Download and unpack Chromium|invoke_tests "Browsers" "Chrome" && exit 0|' $release_dir/images/ubuntu/scripts/build/install-google-chrome.sh

# finally, copy over the packer template
cp patches/ubuntu/templates/ubuntu22-full-x64.pkr.hcl "$release_dir/images/ubuntu/templates/"