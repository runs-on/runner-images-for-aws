#!/usr/bin/env ruby
require 'aws-sdk-ec2'
require 'terminal-table'
require 'slop'
require 'yaml'
require 'date'
require 'colorize'

REGIONS = YAML.load_file(File.expand_path("../../config.yml", __dir__)).fetch("regions")
AMI_PREFIX = ENV.fetch('AMI_PREFIX', 'runs-on-dev')

options = {}
usage = Slop::Options.new do |opts|
  opts.banner = "Usage: #{$0} [--force] [--all] [--help]"
  opts.bool '-f', '--force', 'Do not ask for confirmation'
  opts.bool '-a', '--all', 'Consider all AMIs [warn: this could delete all AMIs]'
  opts.string '--region', 'Region to cleanup', default: "all"
  opts.bool '-h', '--help', 'Show help'
end

begin
  options = usage.parse(ARGV).to_hash
rescue Slop::Error => e
  puts "Error: #{e.message}"
  puts
  puts usage
  exit 1
end

if options[:help]
  puts usage
  exit 0
end

force, all = options.values_at(:force, :all)
skip_most_recent = !all
images_to_remove = []
dev_prefix = AMI_PREFIX.start_with?("runs-on-dev")
keep_count = dev_prefix ? 1 : 2

class Image < Struct.new(:ami, :region)
end

def format_last_launched(last_launched)
  if last_launched.nil?
    return "Never".colorize(:color => :black, :background => :yellow)
  end

  # Parse the time if it's a string
  launch_time = last_launched.is_a?(String) ? Time.parse(last_launched) : last_launched

  time_diff = Time.now - launch_time
  months_old = time_diff / (30 * 24 * 60 * 60) # Approximate months

  formatted_time = launch_time.strftime("%Y-%m-%d %H:%M")

  if months_old > 3
    formatted_time.colorize(:color => :black, :background => :yellow)
  else
    formatted_time
  end
end

REGIONS.each_with_index do |region, index|
  if options[:region] != "all" && region != options[:region]
    next
  end

  if dev_prefix && region != "us-east-1"
    next
  end

  3.times { puts "" } unless index == 0

  ec2 = Aws::EC2::Client.new(region: region)

  # Get all AMIs with the specified name pattern
  resp = ec2.describe_images({
    filters: [
      {
        name: "name",
        values: ["#{AMI_PREFIX}*"],
      },
    ],
  })

  grouped_amis = resp.images.group_by { |ami| ami.name.split('-')[3..5] }.each do |(dist, variant, arch), amis|
    amis.sort_by!(&:creation_date)
    amis.reverse!
  end

  grouped_amis.each do |(dist, variant, arch), amis|
    puts "## #{region} #{AMI_PREFIX} #{dist} #{variant} #{arch}"
    table = Terminal::Table.new do |t|
      t.headings = ['AMI ID', 'Created at', 'Last Launched', 'Name', 'Keep?']
      amis.each_with_index do |ami, index|
        keep = skip_most_recent && index < keep_count
        formatted_last_launched = format_last_launched(ami.last_launched_time)
        t << [ami.image_id, ami.creation_date, formatted_last_launched, ami.name, keep ? "✅" : "❌"]
        unless keep
          images_to_remove << Image.new(ami, region)
        end
      end
    end

    puts table
  end
end

if images_to_remove.empty?
  puts "No images to remove"
  exit 0
end

puts ""
puts "Found #{images_to_remove.count} images to remove"
puts ""

grouped_images_to_remove = images_to_remove.group_by { |image| image.ami.name.sub(AMI_PREFIX + "-", "").split('-')[0..2] }.each do |(dist, variant, arch), images|
  images.sort_by{|i| i.ami.creation_date}
  images.reverse!
end

table = Terminal::Table.new do |t|
  t.headings = ['Region', 'AMI ID', 'Created at', 'Last Launched', 'Name']
  grouped_images_to_remove.each do |(dist, variant, arch), images|
    images.each do |image|
      formatted_last_launched = format_last_launched(image.ami.last_launched_time)
      t << [image.region, image.ami.image_id, image.ami.creation_date, formatted_last_launched, image.ami.name]
    end
  end
end
puts table
puts ""

# Ask for confirmation before each removal
reply = if force
  "y"
else
  print "Are you sure you want to deregister the above AMIs and delete their associated snapshots? (y/n) "
  $stdin.gets.chomp
end

if reply.downcase == 'y'
  grouped_images_to_remove.each do |(dist, variant, arch), images|
    images.each do |image|
      ec2 = Aws::EC2::Client.new(region: image.region)

      puts "Deregistering AMI #{image.ami.image_id}..."
      sleep 2

      # Deregister the AMI
      ec2.deregister_image(image_id: image.ami.image_id, delete_associated_snapshots: true)
    end
  end
else
  puts "Skipping AMI removal"
end
