#!/usr/bin/env ruby

require 'json'
require 'open-uri'
require 'slop'
require 'fileutils'
require 'yaml'
require 'aws-sdk-ec2'

IMAGES = YAML.load_file(File.expand_path("../config.yml", __dir__)).fetch("images")

options = {}

usage = Slop::Options.new do |opts|
  opts.banner = "Usage: #{$0} --image-id [IMAGE_ID]"

  opts.string '--image-id', 'Image ID', required: true
  opts.string '--image-prefix', 'Image Prefix', default: ENV.fetch('AMI_PREFIX', "runs-on-dev")
  opts.string '--image-version', 'Image Version', default: Time.now.strftime("%Y%m%d%H%M%S")
  opts.string '--subnet-id', 'Subnet ID', default: ENV.fetch('SUBNET_ID', nil)
  opts.string '--region', 'Region', default: ENV.fetch('AWS_DEFAULT_REGION', "us-east-1")
  opts.boolean '--debug', 'Debug mode', default: false
end

begin
  options = usage.parse(ARGV).to_hash
rescue Slop::Error => e
  puts "Error: #{e.message}"
  puts
  puts usage
  exit 1
end

image = IMAGES.find do |i|
  i['id'] == options[:image_id]
end
fail("Image not found: #{options[:image_id]}") unless image

dist, variant, arch = image['id'].split('-', 3)
release_dir = "releases/#{dist}/#{arch}"
fail "Skipping #{release_dir}, not found" unless Dir.exist?(release_dir)

ami_name = [options[:image_prefix], image['id'], options[:image_version]].join('-')
packer_template_relative_path = "#{dist.sub(/\d+$/, '')}/templates/#{image['id']}.pkr.hcl"
packer_template_path = "#{release_dir}/images/#{packer_template_relative_path}"

# Copy template to destination
FileUtils.cp("patches/#{packer_template_relative_path}", packer_template_path)

FileUtils.rm_rf("integrations") && Dir.mkdir("integrations")
{
  "runs-on/runner-images-for-stepsecurity" => "integrations/stepsecurity"
}.each do |repo, path|
  system("git clone git@github.com:#{repo}.git #{path}")
end

at_exit do
  FileUtils.rm_rf(packer_template_path)
  FileUtils.rm_rf("integrations")
end

packer_init_cmd = [
  "packer", "init",
  packer_template_path
]
packer_build_cmd = [
  "packer", "build",
  options[:debug] ? "-debug" : nil,
  "-var", %{ami_regions=["us-east-1"]},
  "-var", "ami_name=#{ami_name}",
  "-var", "image_os=#{dist}",
  "-var", "image_version=#{options[:image_version]}",
  "-var", "subnet_id=#{options[:subnet_id]}",
  "-var", "region=#{options[:region]}",
  "-var", "source_ami_name=#{image.fetch('source_ami_name')}",
  "-var", "source_ami_owner=#{image.fetch('source_ami_owner')}",
  "-var", "volume_size=#{image.fetch('volume_size')}",
  "-var", "ami_description=#{image.fetch('description')}",
  packer_template_path
].compact

puts "Running Packer init command: #{packer_init_cmd.join(' ')}"
system({ "PACKER_LOG" => "0" }, *packer_init_cmd) or fail("Packer init failed")

puts "Running Packer build command: #{packer_build_cmd.join(' ')}"

unless system({ "PROJECT_ROOT" => File.expand_path("..", __dir__) }, *packer_build_cmd)
  # Cleanup any dangling EC2 instances
  ec2_client = Aws::EC2::Client.new(region: 'us-east-1')
  instances = ec2_client.describe_instances(
    filters: [
      { name: 'instance-state-name', values: ['running', 'pending', 'stopping', 'stopped'] },
      { name: 'tag:ami_name', values: [ami_name] }
    ]
  ).reservations.flat_map(&:instances)

  instances.each do |instance|
    puts "Terminating instance #{instance.instance_id}"
    ec2_client.terminate_instances(instance_ids: [instance.instance_id])
  end

  fail("Packer build failed")
end

# Fetch AMI ID corresponding to AMI name
ec2_client = Aws::EC2::Client.new(region: 'us-east-1')
ami_id = nil

begin
  response = ec2_client.describe_images({
    filters: [{ name: 'name', values: [ami_name] }]
  })
  
  if response.images.any?
    ami_id = response.images.first.image_id
    puts "Found AMI ID: #{ami_id} for AMI name: #{ami_name}"
  else
    puts "No AMI found with name: #{ami_name}"
  end
rescue Aws::EC2::Errors::ServiceError => e
  puts "Error fetching AMI ID: #{e.message}"
end


if github_output_file = ENV.fetch('GITHUB_OUTPUT', nil)
  File.open(github_output_file, 'a') do |f|
    f.puts "ami_name=#{ami_name}"
    f.puts "ami_id=#{ami_id}"
  end
  puts "AMI name #{ami_name} and ID #{ami_id} added to GitHub Actions outputs"
end

if github_step_summary_file = ENV.fetch('GITHUB_STEP_SUMMARY', nil)
  File.open(github_step_summary_file, 'a') do |f|
    f.puts "## #{image['id']}"
    f.puts "- **AMI Name:** `#{ami_name}`"
    f.puts "- **AMI ID:** `#{ami_id}`"
  end
end